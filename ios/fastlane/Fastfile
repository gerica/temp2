default_platform(:ios)

APP_STORE_CONNECT_TEAM_ID = ENV["APP_STORE_CONNECT_TEAM_ID"]
DEVELOPER_PORTAL_TEAM_ID = ENV["DEVELOPER_PORTAL_TEAM_ID"]
FASTLANE_USER = ENV["FASTLANE_USER"]
FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD = ENV["FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD"]
MATCH_PASSWORD = ENV["MATCH_PASSWORD"]

DEVELOPER_APP_ID = ENV["DEVELOPER_APP_ID"]
DEVELOPER_APP_IDENTIFIER = ENV["DEVELOPER_APP_IDENTIFIER"]
PROVISIONING_PROFILE_SPECIFIER = ENV["PROVISIONING_PROFILE_SPECIFIER"]
TEMP_KEYCHAIN_USER = "test"
TEMP_KEYCHAIN_PASSWORD = "test"

APPLE_ISSUER_ID = ENV["APPLE_ISSUER_ID"]
APPLE_KEY_ID = ENV["APPLE_KEY_ID"]
APPLE_KEY_CONTENT = ENV["APPLE_KEY_CONTENT"]
APPLE_KEY_FILEPATH = ENV["APPLE_KEY_FILEPATH"]
GIT_AUTHORIZATION = ENV["GIT_AUTHORIZATION"]
GITHUB_WORKSPACE = ENV["GITHUB_WORKSPACE"]

default_platform(:ios)

platform :ios do
  desc "Push a new beta build to TestFlight"
  lane :closed_beta do
    build_app(workspace: "Runner.xcworkspace", scheme: "Runner")
    upload_to_testflight(
      skip_waiting_for_build_processing: true,
#       app_identifier: "co.radiolife",
      app_identifier: "#{DEVELOPER_APP_IDENTIFIER}",
      itc_provider: "#{DEVELOPER_PORTAL_TEAM_ID}",
    )
  end

  lane :release do
#    puts "GITHUB_WORKSPACE: "+ (GITHUB_WORKSPACE || "")
    api_key = app_store_connect_api_key(
      key_id:  APPLE_KEY_ID,
      issuer_id: APPLE_ISSUER_ID,
      key_content: APPLE_KEY_CONTENT,
      is_key_content_base64:true,
#       key_filepath: 'AuthKey_P8A9N5F3Z3.p8',
#       key_filepath: APPLE_KEY_FILEPATH,
      duration: 1200, # optional (maximum 1200)
      in_house: false # optional but may be required if using match/sigh
    )

    upload_to_testflight(
      api_key: api_key,
      skip_submission: true,
      ipa: GITHUB_WORKSPACE+"/ios/fastlane/radio_life.ipa",
      skip_waiting_for_build_processing: true,
    )
  end

  desc "Deploy Production and Staging to TestFlight"
    lane :deploy_all_to_testflight do
      # =======================================================
      # Step 0: If running on the CICD we need to create a custom keychain
      if ENV['CI']
        @api_key = app_store_connect_api_key(
          key_id: APPLE_KEY_ID,
          issuer_id: APPLE_KEY_CONTENT,
          key_content: APPLE_KEY_FILEPATH,
          is_key_content_base64: true,
          duration: 1200,
          in_house: false
        )
        setup_ci
      end

      # =======================================================
      # Step 1: Increment the build number of this deploy
    #       increment_build_number({
    #         xcodeproj: "my_app.xcodeproj",
    #         build_number: latest_testflight_build_number({ app_identifier: "br.com.my_company.my_app", api_key: @api_key }) + 1
    #       })

      # =======================================================
      # Step 2: Attempt Deploy
      # Sync the provisioning profiles
      sync_code_signing(type: "appstore", app_identifier: DEVELOPER_APP_IDENTIFIER)
      # Build the app
      build_app(
        workspace: "Runner.xcworkspace",
        configuration: 'Release',
        export_options: {
          provisioningProfiles: {
            DEVELOPER_APP_ID => PROVISIONING_PROFILE_SPECIFIER
          }
        }
      )
      # Upload the build to testflight
      upload_to_testflight(
        skip_waiting_for_build_processing: true,
        api_key: @api_key
      )
    end

end
